{"version":3,"sources":["../minecraftDownload.js"],"names":["fetch","require","fs","mineping","exec","updateServer","Promise","resolve","then","isUpdateAvailable","updateData","getUpdate","restartServer","available","console","log","downloadJarFile","remote","updated","message","release","error","stdout","stderr","all","getRemoteVersion","getLocalVersion","values","local","catch","release_json","res","file","createWriteStream","body","pipe","setLocalVersion","json","latest","reject","existsSync","readFile","err","data","JSON","parse","snapshot","writeFile","stringify","ping","response","module","exports"],"mappings":"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","file":"minecraftDownload.js","sourcesContent":["\n\nconst fetch = require(\"node-fetch\");\nconst fs = require(\"fs\");\nconst mineping = require(\"mineping\");\nconst exec = require('child_process').exec;\n\nfunction updateServer() {\n    return new Promise((resolve)=>{\n        resolve();\n    }).then(()=>{\n        return isUpdateAvailable();\n    }).then((updateData)=>{\n        return getUpdate(updateData);\n    }).then((updateData)=>{\n        return restartServer(updateData);\n    });\n}\n\nfunction getUpdate(updateData) {\n    if (updateData.available) {\n        console.log(updateData);\n        return downloadJarFile(updateData.remote).then(function(){\n            return ({\n                updated: true,\n                message: `Downloaded version: ${updateData.remote.release}`\n            });\n        });\n        // return (update.remote.release);\n    } else {\n        return ({\n            updated: false,\n            message: \"No new version found\"\n        });\n    }\n}\n\nfunction restartServer(updateData){\n    if (updateData.updated) {\n        exec('source restart.sh', function (error, stdout, stderr) {\n            if (stderr !== '') {\n                console.log('stderr: ' + stderr);\n            }\n            console.log('stdout: ' + stdout);\n            if (error !== null) {\n                console.log('exec error: ' + error);\n            }\n        });\n\n    } else {\n\n    }\n\n    return (updateData);\n}\n\nfunction isUpdateAvailable() {\n    return Promise.all([getRemoteVersion(), getLocalVersion()]).then((values)=>{\n        console.log(values);\n        let remote = values[0];\n        let local = values[1];\n        return ({\n            available: remote.release > local.release,\n            local,\n            remote\n        });\n    }).catch((error)=>{\n        console.log(error);\n    });\n}\n\n/**\n *\n * @return {Promise}\n */\nfunction downloadJarFile(release_json) {\n    return fetch(`https://s3.amazonaws.com/Minecraft.Download/versions/${release_json.release}/minecraft_server.${release_json.release}.jar`)\n        .then(function(res){\n            let file = fs.createWriteStream(\"./minecraft_server.jar\");\n            res.body.pipe(file);\n            console.log(`Downloaded version ${release_json.release}`);\n\n            setLocalVersion(release_json);\n        });\n}\n\n/**\n *\n * @returns {Promise}\n */\nfunction getRemoteVersion() {\n    return fetch(\"https://launchermeta.mojang.com/mc/game/version_manifest.json\").then(function(res) {\n        return res.json();\n    }).then(function(json) {\n        return json.latest;\n    }).catch(function(error){\n        return error;\n    });\n}\n\n\n/**\n * getLocalVersion - looks for the version number of the downloaded minecraft\n * instance.\n *\n * @return {Promise}  promise object representing the reading of the json file. \n */\nfunction getLocalVersion() {\n    const file = \"./latest.json\";\n    return new Promise(function(resolve, reject){\n        if (fs.existsSync(file)){\n            fs.readFile(file, (err, data) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(JSON.parse(data));\n                }\n            });\n        } else {\n            resolve({\n                release: \"0.0.0\",\n                snapshot: \"0.0.0\"\n            });\n        }\n    });\n}\n\nfunction setLocalVersion(json) {\n    const file = \"./latest.json\";\n    return new Promise(function(resolve, reject) {\n        fs.writeFile(file, JSON.stringify(json), function(error) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n\nfunction ping() {\n    return new Promise(function(resolve, reject){\n        mineping(3, \"minecraft.kochie.io\", 25565, function(response) {\n            console.log(response);\n            resolve(response);\n        });\n    });\n}\n\nmodule.exports = {\n    getRemoteVersion,\n    getLocalVersion,\n    updateServer,\n    isUpdateAvailable,\n    ping\n};"]}